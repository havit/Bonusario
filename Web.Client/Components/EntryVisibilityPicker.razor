<div class="@CssClassHelper.Combine(Readonly ? "readonly" : null, CssClass)">
    @{
        RenderFragment entryVisibilityIndicator =
                @<div class="d-flex gap-1 entry-visibility-dropdown-toggle-content">
                    <HxIcon Icon="GetIconForValue(Value)" />
                    <div class="small">@GetTextForValue(Value)</div>
                </div>;
    }
    
    @if (Readonly)
    {
        @entryVisibilityIndicator
    }
    else
    {
        <HxDropdown>
            <HxDropdownToggleElement CssClass="float-end" ElementName="div">
                @entryVisibilityIndicator
            </HxDropdownToggleElement>

            <HxDropdownMenu Alignment="DropdownMenuAlignment.End">
                <HxDropdownHeader>
                    <div class="text-black">Kdo to uvidí?</div>
                    <div class="mt-1 fw-normal text-secondary">Vyberte kdo uvidí tento záznam.</div>
                </HxDropdownHeader>

                @foreach (var entryPublic in possibleValues)
                {
                    <HxDropdownItem OnClick="() => HandleEntryVisibilityChanged(entryPublic)">
                        <div class="bg-primary d-inline-flex justify-content-center text-white p-1 rounded-circle entry-visibility-icon">
                            <HxIcon Icon="@GetIconForValue(entryPublic)" />
                        </div>

                        <small class="text-nowrap">@GetTextForValue(entryPublic)</small>

                        @if (Value == entryPublic)
                        {
                            <HxIcon Icon="BootstrapIcon.Check2" CssClass="ms-auto text-primary float-end" />
                        }
                    </HxDropdownItem>
                }
            </HxDropdownMenu>
        </HxDropdown>
    }
</div>
